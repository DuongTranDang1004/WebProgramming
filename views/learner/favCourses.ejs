<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Favorite Courses</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>

<div class="container mx-auto p-8">
  <h2 class="text-2xl font-semibold mb-6">My Favorite Courses</h2>

  <!-- Sorting Controls -->
  <div class="mb-6 flex justify-between">
    <div>
      <label for="sort" class="mr-2">Sort By:</label>
      <select id="sort" class="border rounded-lg p-2" onchange="sortCourses()">
        <option value="name">Name</option>
        <option value="price">Price</option>
      </select>
    </div>
    <!-- Add Course Button -->
    <button onclick="addCourse()" class="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-colors duration-300">
      Add Course
    </button>
  </div>

  <!-- Courses Container -->
  <div id="coursesContainer" class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-6">
    <!-- Course cards will be added dynamically here -->
  </div>
</div>

<script>
  // Example course data fetched dynamically
  let courses = [];

  // Function to fetch all favorite courses by learnerId
  const fetchFavoriteCourses = async (learnerId) => {
    try {
      const response = await fetch(`/api/favoritesCourses/learner/${learnerId}`);
      if (!response.ok) {
        throw new Error("Failed to fetch favorite courses");
      }
      return await response.json();
    } catch (error) {
      console.error("Error fetching courses:", error);
    }
  };

  // Function to render the courses
  function renderCourses() {
    const container = document.getElementById('coursesContainer');
    container.innerHTML = ''; // Clear previous content

    courses.forEach(course => {
      const randomReviews = Math.floor(Math.random() * 5000); // Generate random reviews
      const courseCard = `
        <div class="border border-gray-200 rounded-lg shadow-lg p-4 hover:shadow-xl transition-shadow duration-300">
          <img src="${course.courseId.thumbnailImage}" alt="Course Image" class="w-full h-48 object-cover rounded-lg mb-4">
          <h3 class="text-lg font-semibold text-gray-800 mb-2">${course.courseId.name}</h3>
          <p class="text-gray-600 mb-2">by ${course.courseId.instructorId}</p>
          <div class="flex items-center mb-2">
            <svg class="w-4 h-4 text-yellow-500" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 17.75L5.47 21.25L6.72 14L1 9.19L8.37 8.39L12 2L15.63 8.39L23 9.19L17.28 14L18.53 21.25L12 17.75Z"></path>
            </svg>
            <span class="text-gray-600 ml-2">(${randomReviews} reviews)</span>
          </div>
          <p class="text-xl font-bold text-gray-800 mb-4">$${course.courseId.price}</p>
          <button onclick="removeCourse(${course.courseId._id})" class="bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-600 transition-colors duration-300">
            Remove from Favorites
          </button>
        </div>
      `;
      container.innerHTML += courseCard;
    });
  }

  // Function to add a course
  function addCourse() {
    const newCourse = {
      courseId: {
        _id: courses.length + 1,
        name: prompt('Enter course name:'),
        instructorId: prompt('Enter instructor name:'),
        price: parseFloat(prompt('Enter course price:')),
        thumbnailImage: 'https://via.placeholder.com/300x200'
      }
    };
    courses.push(newCourse);
    renderCourses();
  }

  // Function to remove a course
  function removeCourse(id) {
    courses = courses.filter(course => course.courseId._id !== id);
    renderCourses();
  }

  // Function to sort courses
  function sortCourses() {
    const sortBy = document.getElementById('sort').value;
    if (sortBy === 'name') {
      courses.sort((a, b) => a.courseId.name.localeCompare(b.courseId.name));
    } else if (sortBy === 'price') {
      courses.sort((a, b) => a.courseId.price - b.courseId.price);
    }
    renderCourses();
  }

  // Fetch favorite courses on page load
  document.addEventListener("DOMContentLoaded", async function () {
    const urlSegments = window.location.pathname.split("/");
    const learnerId = urlSegments[urlSegments.length - 1]; // Extract learnerId from URL

    const favoriteCourses = await fetchFavoriteCourses(learnerId);
    if (favoriteCourses) {
      courses = favoriteCourses; // Store the fetched courses
      renderCourses(); // Render courses
    }
  });
</script>

</body>
</html>
