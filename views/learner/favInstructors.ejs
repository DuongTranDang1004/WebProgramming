<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Favorite Instructors</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>

<div class="container mx-auto p-8">
  <h2 class="text-2xl font-semibold mb-6">My Favorite Instructors</h2>

  <!-- Sorting Controls -->
  <div class="mb-6 flex justify-between items-center">
    <div>
      <label for="sort" class="mr-2">Sort By:</label>
      <select id="sort" class="border rounded-lg p-2" onchange="sortInstructors()">
        <option value="name">Name</option>
        <option value="rating">Rating</option>
        <!-- Add more sorting options as needed -->
      </select>
    </div>
    <!-- Add Instructor Button -->
    <button class="bg-purple-500 text-white py-2 px-4 rounded-lg hover:bg-purple-700 transition-colors duration-300">
      Add Instructor
    </button>
  </div>

  <!-- Instructors Container -->
  <div id="instructorsContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    <!-- Instructor cards will be added dynamically here -->
  </div>
</div>

<script>
  let instructors = []; // Array to hold instructor data

  // Function to fetch all favorite instructors by learnerId
  const fetchFavoriteInstructors = async (learnerId) => {
    try {
      const response = await fetch(`/api/followingInstructors/learner/${learnerId}`);
      if (!response.ok) {
        throw new Error("Failed to fetch favorite instructors");
      }
      return await response.json();
    } catch (error) {
      console.error("Error fetching instructors:", error);
    }
  };

  // Function to render the instructors
  function renderInstructors() {
    const container = document.getElementById('instructorsContainer');
    container.innerHTML = ''; 

    instructors.forEach(instructor => {
        const instructorCard = `
            <div class="border border-gray-200 rounded-lg shadow-lg p-4 hover:shadow-xl transition-shadow duration-300">
                <img src="${instructor.instructorId.profilePicture || 'default.jpg'}" alt="Instructor Image" class="w-full h-48 object-cover rounded-lg mb-4">
                <h3 class="text-lg font-semibold text-gray-800 mb-2">${instructor.instructorId.firstName} ${instructor.instructorId.lastName}</h3>
                <p class="text-gray-600 mb-2">${instructor.instructorId.specialization || 'Specialization'}</p>
                <div class="flex items-center mb-2">
                    <svg class="w-4 h-4 text-yellow-500" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M12 17.75L5.47 21.25L6.72 14L1 9.19L8.37 8.39L12 2L15.63 8.39L23 9.19L17.28 14L18.53 21.25L12 17.75Z"></path>
                    </svg>
                    <span class="text-gray-600 ml-2">Rating: ${Math.floor(Math.random() * 5) + 1}/5</span>
                </div>
                <p class="text-gray-600 mb-4">${instructor.instructorId.Bio || 'Biography not available'}</p>
                <button class="remove-instructor bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-700 transition-colors duration-300" data-id="${instructor.instructorId._id}">
                    Remove from Favorites
                </button>
            </div>
        `;
        container.innerHTML += instructorCard;
    });

    document.querySelectorAll('.remove-instructor').forEach(button => {
        button.addEventListener('click', function() {
            const instructorId = this.dataset.id;
            removeInstructor(instructorId);
        });
    });
  }

  async function removeInstructor(instructorId) {
    try {
        const response = await fetch(`/api/followingInstructors/${instructorId}`, {
            method: 'DELETE',
        });

        if (!response.ok) {
            throw new Error('Failed to remove instructor from favorites');
        }
        // Re-fetch and render instructors after removal
        const urlSegments = window.location.pathname.split("/");
        const learnerId = urlSegments[urlSegments.length - 1]; // Extract learnerId from URL
        instructors = await fetchFavoriteInstructors(learnerId);
        renderInstructors();

        alert('Instructor removed from favorites');
    } catch (error) {
        console.error('Error removing instructor:', error);
    }
  }

  // Function to sort instructors
  function sortInstructors() {
    const sortBy = document.getElementById('sort').value;
    if (sortBy === 'name') {
      instructors.sort((a, b) => a.instructorId.firstName.localeCompare(b.instructorId.firstName));
    } else if (sortBy === 'rating') {
      instructors.sort((a, b) => Math.floor(Math.random() * 5) - Math.floor(Math.random() * 5));
    }
    renderInstructors();
  }

  // Fetch favorite instructors on page load
  document.addEventListener("DOMContentLoaded", async function () {
    const urlSegments = window.location.pathname.split("/");
    const learnerId = urlSegments[urlSegments.length - 1]; 

    const favoriteInstructors = await fetchFavoriteInstructors(learnerId);
    if (favoriteInstructors) {
      instructors = favoriteInstructors;
      renderInstructors(); 
    }
  });
</script>

</body>
</html>
